"""

Python3 replay script for IOCTL 0x{0:x} to {1:s} (in {2:s})

Auto-generated by CFB

"""

import sys, os
from ctypes import *
from contextlib import contextmanager

try:
    import win32con
except ImportError:
    print('win32 package is required: pip install pywin32')
    sys.exit(1)

ntdll       = windll.ntdll
kernel32    = windll.kernel32
KdPrint     = lambda x:  kernel32.OutputDebugStringW(x + os.linesep)

GENERIC_READ = 0x80000000
GENERIC_WRITE = 0x40000000
OPEN_EXISTING = 3


def hexdump(source, length=0x10):
    result = []
    for i in range(0, len(source), length):
        chunk = bytearray(source[i:i + length])
        hexa = " ".join([c for c in chunk])
        text = "".join([chr(b) if 0x20 <= b < 0x7F else "." for b in chunk])
        result.append("{{addr:#018x}}    {{data:<{{dw}}}}    {{text}}".format(addr=base+i,dw=3*length,data=hexa,text=text))
    return os.linesep.join(result)


@contextmanager
def GetDeviceHandle(DeviceName, *args, **kwargs):
    Access = kwargs.get('dwDesiredAccess', GENERIC_READ | GENERIC_WRITE)
    handle = kernel32.CreateFileW(DeviceName, Access, 0, None, OPEN_EXISTING, 0, None)
    if handle == -1: raise IOError('Cannot get handle to "%s"' % DeviceName)
    try: yield handle
    finally: kernel32.CloseHandle(handle)


def DeviceIoctlControl(DeviceName, IoctlCode, _in=b'', _out=b'', *args, **kwargs):
    dwBytesReturned = c_uint32()
    InputBufferSize = kwargs.get('_inlen', len(_in))
    OutputBufferSize = kwargs.get('_outlen', len(_out))
    InputBuffer = create_string_buffer(InputBufferSize)
    OutputBuffer = create_string_buffer(OutputBufferSize)
    InputBuffer.value = _in
    OutputBuffer.value = _out
    res = -1
    with GetDeviceHandle(DeviceName) as hDriver:
        KdPrint('Sending inbuflen=%dB to %s with ioctl=%#x (outbuflen=%dB)' % (InputBufferSize, DeviceName, IoctlCode, OutputBufferSize))
        res = kernel32.DeviceIoControl(hDriver, IoctlCode, InputBuffer, InputBufferSize, OutputBuffer, OutputBufferSize, byref(dwBytesReturned), None)
        KdPrint('Sent %dB to %s with IoctlCode %#x' % (InputBufferSize, DeviceName, IoctlCode ))
        if res:
            if dwBytesReturned: 
                print(hexdump(OutputBuffer))
        else:
            print( GetLastError(), FormatError(GetLastError()) )
    return res


def Trigger():
    DeviceName = r'''{1:s}'''
    IoctlCode = 0x{0:x}
    lpIrpDataIn = bytearray.fromhex({3:s})
    lpIrpDataOut = bytearray([0x00]*{4:d})
    # lpIrpDataIn & lpIrpDataOut can be modified freely from here
    return DeviceIoctlControl(DeviceName, IoctlCode, bytes(lpIrpDataIn), bytes(lpIrpDataOut))


if __name__ == '__main__':
    Trigger()